// Mocks generated by Mockito 5.3.2 from annotations
// in tdd_post/test/domain/usecases/delete_post_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tdd_post/core/error/failures.dart' as _i5;
import 'package:tdd_post/data/models/post_model.dart' as _i7;
import 'package:tdd_post/domain/entities/post_entity.dart' as _i6;

import 'delete_post_usecase_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostBaseRepositoryTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostBaseRepositoryTest extends _i1.Mock
    implements _i3.PostBaseRepositoryTest {
  MockPostBaseRepositoryTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Post>>> getAllPost() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllPost,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Post>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Post>>(
          this,
          Invocation.method(
            #getAllPost,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Post>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Post>> createPost(
          _i7.PostModel? post) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPost,
          [post],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Post>>.value(
            _FakeEither_0<_i5.Failure, _i6.Post>(
          this,
          Invocation.method(
            #createPost,
            [post],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Post>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Post>> editPost(_i7.PostModel? post) =>
      (super.noSuchMethod(
        Invocation.method(
          #editPost,
          [post],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Post>>.value(
            _FakeEither_0<_i5.Failure, _i6.Post>(
          this,
          Invocation.method(
            #editPost,
            [post],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Post>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> deletePost(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #deletePost,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
